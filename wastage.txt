// contain the colors which are in our guesses
struct color 
{
    // the turn number
    int turnNumber;

    // contain the 3 colors the player will pass
    char rainbow [3];
    
    // validity of your guesses
    int valid [3];
};

// it contains all important functions
class functions 
{
    public:
        // Contains the guesses (input)
        color guessNum[7];


        void guess(color& guessNum[]);

};

preparatory::priv::scanner(title_1_text, {"┌", "├", "└"}, 2, 35, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", "─", "─"}, 2, 36, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", "─", "─"}, 2, 37, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", "─", "─"}, 2, 38, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"╴", "╴", "╴"}, 2, 39, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ", " ", " "}, 2, 40, Output_con::Coloration::Yellow);

preparatory::priv::scanner(title_1_text, {"╶", " ", "╶"}, 2, 55, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", "─"}, 2, 56, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"┬", "│", "┴"}, 2, 57, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", "─"}, 2, 58, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"╴", " ", "╴"}, 2, 59, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ", " ", " "}, 2, 60, Output_con::Coloration::Yellow);

preparatory::priv::scanner(title_1_text, {"┌", "│", "└"}, 2, 67, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", "─"}, 2, 68, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", "─"}, 2, 69, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", "─"}, 2, 70, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"╮", "│", "╯"}, 2, 71, Output_con::Coloration::Yellow);

preparatory::priv::scanner(title_1_text, {"╭", "│", "╵"}, 2, 47, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 48, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 49, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"┬", "│", "╵"}, 2, 50, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 51, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 52, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"╮", "│", "╵"}, 2, 53, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ", " ", " "}, 2, 54, Output_con::Coloration::Yellow);

preparatory::priv::scanner(title_1_text, {"╭", "│", "╵"}, 2, 8, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 9, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 10, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"┬", "│", "╵"}, 2, 11, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 12, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 13, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"╮", "│", "╵"}, 2, 14, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ", " ", " "}, 2, 15, Output_con::Coloration::Yellow);

preparatory::priv::scanner(title_1_text, {"╭",  "│", "╵"}, 2, 61, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"\\", " ", " "}, 2, 62, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ", "\\", " "}, 2, 63, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ", " ", "\\"}, 2, 64, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"╷",  "│", "╯"}, 2, 65, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ",  " ", " "}, 2, 66, Output_con::Coloration::Yellow);

preparatory::priv::scanner(title_1_text, {"┌", "│", "╵"}, 2, 41, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", "─", " "}, 2, 42, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", "─", " "}, 2, 43, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", "┬", "╰"}, 2, 44, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"╮", "╯", "─"}, 2, 45, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ", " ", " "}, 2, 46, Output_con::Coloration::Yellow);

preparatory::priv::scanner(title_1_text, {"╭", "╰", "╶"}, 2, 23, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", "─", "─"}, 2, 24, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", "─", "─"}, 2, 25, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", "─", "─"}, 2, 26, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"╴", "╮", "╯"}, 2, 27, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ", " ", " "}, 2, 28, Output_con::Coloration::Yellow);

preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 29, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 30, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"┬", "│", "╵"}, 2, 31, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 32, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {"─", " ", " "}, 2, 33, Output_con::Coloration::Yellow);
    preparatory::priv::scanner(title_1_text, {" ", " ", " "}, 2, 34, Output_con::Coloration::Yellow);

preparatory::priv::scanner(help_1_text, {"╷", "├", "╵"}, 2, 28, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", "─", " "}, 2, 29, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", "─", " "}, 2, 30, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", "─", " "}, 2, 31, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", "─", " "}, 2, 32, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {"╷", "┤", "╵"}, 2, 33, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", " ", " "}, 2, 34, Output_con::Coloration::Red);

    preparatory::priv::scanner(help_1_text, {"┌", "├", "└"}, 2, 35, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {"─", "─", "─"}, 2, 36, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {"─", "─", "─"}, 2, 37, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {"─", "─", "─"}, 2, 38, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {"╴", "╴", "╴"}, 2, 39, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", " ", " "}, 2, 40, Output_con::Coloration::Red);

    preparatory::priv::scanner(help_1_text, {"╷", "│", "└"}, 2, 41, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", " ", "─"}, 2, 42, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", " ", "─"}, 2, 43, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", " ", "─"}, 2, 44, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", " ", "╴"}, 2, 45, Output_con::Coloration::Red);
    preparatory::priv::scanner(help_1_text, {" ", " ", " "}, 2, 46, Output_con::Coloration::Red);

    for (int c = 1; c < 8; c++){
        cout << endl << "------------------------------" << endl;
        cout << "|    " << c << " | " << guess[c-1][0] << " " << guess[c-1][1] << " " << guess[c-1][2] << " ";
        cout << "   | " << validity[c-1][0] << " " << validity[c-1][1] << " " << validity[c-1][2] << "    |" << endl;
    }
    cout << "------------------------------" << endl << endl;

    do {
        cout << "Choices (R,O,Y,G,B,V)" << endl;
        cout << "Enter Your Three Guesses:";

        cin >> guess[row][0] >> guess[row][1] >> guess[row][2];

        // checks if input is part of the choices (R,O,Y,B,G,V)
        bool truOne, truTwo, truThr;
        truOne = choiceCheck(guess[row][0], choiceClr);
        truTwo = choiceCheck(guess[row][1], choiceClr);
        truThr = choiceCheck(guess[row][2], choiceClr);
        if (!truOne || !truTwo || !truThr) {
            cout << "Your guess is invalid, please try again." << endl;
            will_run_again = true;
        } else {
            will_run_again = false;
        }
    } while (will_run_again);

    /*
void primary::game_screen_1l(
    std::vector<Output_con>& game_1_border
) {
    for (int i = 1; i <= 78; ++i) {
        game_1_border.push_back(Output_con("━", 0, i, 0, false));
        game_1_border.push_back(Output_con("━", 23, i, 0, false));
    }
    for (int i = 1; i <= 22; ++i) {
        game_1_border.push_back(Output_con("┃", i, 0, 0, false));
        game_1_border.push_back(Output_con("┃", i, 79, 0, false));
    }
    game_1_border.push_back(Output_con("┏", 0, 0, 0, false));
    game_1_border.push_back(Output_con("┓", 0, 79, 0, false));
    game_1_border.push_back(Output_con("┗", 23, 0, 0, false));
    game_1_border.push_back(Output_con("┛", 23, 79, 0, true));
} */

/*
void primary::game_screen_1p(
    std::vector<Output_con>& game_1_border
) {
    preparatory::priv::printcon(game_1_border);

    game_1_border.clear();
}*/


// loads the border
/*
void game_screen_1l(
    std::vector<Output_con>& game_1_border
);

// prints and clear the border
void game_screen_1p(
    std::vector<Output_con>& game_1_border
);*/